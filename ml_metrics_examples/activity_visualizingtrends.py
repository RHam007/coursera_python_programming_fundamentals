# -*- coding: utf-8 -*-
"""PYTC2M3P01_Activity_Visualizingtrends.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bOjpXKYHzS5zDyB8anDqkVEhx6zcXKss

# How to Interact with this Jupyter Notebook

In this activity, you will use a Jupyter Notebook, which integrates both text and code. The gray boxes contain executable code, which you will run in order to view its output. The text in between the code provides instructions.

## Step 1: Installing required libraries

Run the cell below, which installs all necessary libraries.
"""

#!pip install pandas matplotlib plotly.express

"""## Step 2: Loading and exploring the data

Run the cell below, which imports all necessary libraries, loads `music_data.csv`, and displays the first 5 rows to get information about the columns. This cell does not change.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
music_data = pd.read_csv('music_data.csv')

# Display the first 5 rows
print("First 5 rows of the dataset:")
print(music_data.head())

# Get information about the columns (data types and non-null values)
print("\nColumn information:")
print(music_data.info())

"""## Step 3: Generating a bar chart using Matplotlib's pyplot module

Follow the steps in the instructions and run the cell below.
"""

# Count the occurrences of each unique value in the `genre` column
genre_counts = music_data['genre'].value_counts()

# Sort the genres by frequency in descending order and select the top 10 genres
top_10_genres = genre_counts.head(10)

# Create a bar chart to display the top 10 genres by frequency
plt.figure(figsize=(10, 6))
top_10_genres.plot(kind='bar')

# Add title and labels
plt.title('Top 10 Genres by Frequency') # insert code here
plt.xlabel('Genre') # insert code here
plt.ylabel('Number of Songs') # insert code here

# Display the plot using plt.show()
# insert code here
plt.show()

"""## Step 4: Generating a histogram using Matplotlib's plt.figure()

Follow the steps in the instructions and run the cell below.
"""

# Extract the duration_seconds column
duration_seconds = music_data['duration_seconds'] # insert code here

# Create a histogram to display the distribution of `duration_seconds`
plt.figure(figsize = (8,5)) # insert code here
plt.hist(duration_seconds, bins=20, color='skyblue', edgecolor='black')

# Add title and labels
plt.title('Distribution of Song Durations')
plt.xlabel('Duration (seconds)')
plt.ylabel('Frequency')

# Display the plot using plt.show()
# insert code here
plt.show()

"""## Step 5: Generating a histogram using Matplotlib's plt.hist()

Follow the steps in the instructions and run the cell below.
"""

# Extract the popularity column
popularity = music_data['popularity'] # insert code here

# Create a histogram to display the distribution of popularity
plt.figure(figsize=(8, 5))  # Set the figure size for better readability

# Plot the histogram with customized bins and colors
plt.hist(popularity, bins = 10, color = 'green', edgecolor = 'black')  # insert code here

# Add title and labels
plt.title('Distribution of Song Popularity')
plt.xlabel('Popularity')
plt.ylabel('Frequency')

# Display the plot using plt.show()
# insert code here
plt.show()

"""## Step 6: Generating heatmaps using Plotly

Follow the steps outlined in your instructions document to complete the code below. Click run to see the results.
"""

import plotly.express as px

# Create a new dataframe `numeric_features` containing only the
# numeric columns we want to analyze
numeric_features = music_data[['tempo', 'energy', 'danceability',
                               'valence', 'acousticness', 'popularity']]

# Compute the correlation matrix
correlation_matrix = numeric_features.corr()

# Create and display a heatmap using Plotly
plt = px.imshow(correlation_matrix,
                x=correlation_matrix.columns,
                y=correlation_matrix.columns,
                color_continuous_scale="RdBu",  # Use a built-in Plotly colorscale
                text_auto=".2f",# Add code here
                title="Correlation Matrix of Music Features"
               )

plt.show()

"""## Step 7: Generating violin plots using Plotly

Follow the steps outlined in your instructions document to complete the code below. Click run to see the results.
"""

import plotly.express as px

plt = px.violin(music_data,
                x='genre',
                y='popularity',
                box = True,# Your code here
                title="Popularity Distribution Across Genres")

plt.show()

"""You have reached the end of this exercise."""