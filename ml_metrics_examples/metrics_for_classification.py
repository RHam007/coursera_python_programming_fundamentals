# -*- coding: utf-8 -*-
"""Metrics_for_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yLrziJZ9BLNhiCulRL_cd5TnUdfR1O8K
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

"""## Import Iris Dataset"""

from sklearn.datasets import load_iris

iris = load_iris()
X = iris.data
y = iris.target

data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['target'] = iris.target
data['target_names'] = data['target'].map({i:name for i, name in enumerate(iris.target_names)})

print(data.head().to_markdown(index=False, numalign="left", stralign="left"))

"""#### Split Data into Training and Testing Sets"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""#### Logistic Regression Analysis"""

log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

decision_tree = DecisionTreeClassifier()
decision_tree.fit(X_train, y_train)

"""#### Check Data Accuracy"""

y_pred_log_reg = log_reg.predict(X_test)
y_pred_dt = decision_tree.predict(X_test)

accuracy_log_reg = accuracy_score(y_test, y_pred_log_reg)
accuracy_dt = accuracy_score(y_test, y_pred_dt)

print("Logistic Regression Accuracy:", accuracy_log_reg)
print("Decision Tree Accuracy:", accuracy_dt)

precision_log_reg = precision_score(y_test, y_pred_log_reg, average='weighted')
recall_log_reg = precision_score(y_test, y_pred_log_reg, average='weighted')

precision_dt = precision_score(y_test, y_pred_dt, average='weighted')
recal_dt = recall_score(y_test, y_pred_dt, average='weighted')

print("Logistic Regression Precision:", precision_log_reg)
print("Logistic Regression Recall:", recall_log_reg)

print("Decision Tree Precision:", precision_dt)
print("Decision Tree Recall:", recal_dt)

f1_log_reg = f1_score(y_test, y_pred_log_reg, average='weighted')
f1_dt = f1_score(y_test, y_pred_dt, average='weighted')

print("Logistic Regression F1 Score:", f1_log_reg)
print("Decision Tree F1 Score:", f1_dt)

"""#### Create a Confusion Matrix of the Data"""

#Plot Confusion matrices
fix, axes = plt.subplots(1, 2, figsize=(12, 5))

# Logistic Regression confusion matrix
cm_log_reg = confusion_matrix(y_test, y_pred_log_reg)
sns.heatmap(cm_log_reg, annot=True, fmt='d', cmap='Blues', ax=axes[0])
axes[0].set_title('Logistic Regression Confusion Matrix')
axes[0].set_xlabel('Predicted')
axes[0].set_ylabel('Actual')

# Decision Tree confusion matrix
cm_decision_tree = confusion_matrix(y_test, y_pred_dt)
sns.heatmap(cm_decision_tree, annot=True, fmt='d', cmap='Blues', ax=axes[1])
axes[1].set_title('Decision Tree Confusion Matrix')
axes[1].set_xlabel('Predicted')
axes[1].set_ylabel('Actual')

plt.tight_layout()
plt.show()